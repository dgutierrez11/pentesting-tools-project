import time
import os
import subprocess
from datetime import datetime
from pprint import pprint
from zapv2 import ZAPv2
from persistence.postgres_bd import ConnectionPostgres

print('Starting Zap ...')
subprocess.Popen(['/usr/local/bin/zap.sh', '-daemon'], stdout=open(os.devnull, 'w'))

print('Waiting for ZAP to load ...')
time.sleep(100)
print('Finish...')

target = 'http://localhost:3000'
apikey = 'pql3nrqmdkr2imstg4vgl9bgeg'

zap = ZAPv2(apikey=apikey)

print('Accessing target {}'.format(target))
zap.urlopen(target)
# Give the sites tree a chance to get updated
time.sleep(2)

print('Spidering target {}'.format(target))
scanid = zap.spider.scan(target)
# Give the Spider a chance to start
time.sleep(2)
while int(zap.spider.status(scanid)) < 100:
    # Loop until the spider has finished
    print('Spider progress %: {}'.format(zap.spider.status(scanid)))
    time.sleep(2)

print('Spider completed')

while int(zap.pscan.records_to_scan) > 0:
    print('Records to passive scan : {}'.format(zap.pscan.records_to_scan))
    time.sleep(2)

print('Passive Scan completed')

print('Active Scanning target {}'.format(target))
scanid = zap.ascan.scan(target)
while int(zap.ascan.status(scanid)) < 100:
    # Loop until the scanner has finished
    print('Scan progress %: {}'.format(zap.ascan.status(scanid)))
    time.sleep(5)

print('Active Scan completed')

# Reporte the resultados

print('Hosts: {}'.format(', '.join(zap.core.hosts)))
print('Alerts: ')
#pprint(zap.core.alerts())
alerts = zap.core.alerts()

list_records = []
for alert in alerts:
    if alert.get('risk') == 'Informational':
        continue

    record = (alert.get('id'), alert.get('name'), alert.get('alert'), alert.get('risk'),
              alert.get('description'), alert.get('cweid'), datetime.now())
    list_records.append(record)
    print(record)

# Se imprime todos los registros
print(list_records)

# Se registrar las alertas
cp = ConnectionPostgres()
cp.add_all_record(list_records)
# prueba.execute_query("SELECT * FROM alert")
# params = ("alert5", "Information Error", "", "Error", "The response is incorrect", 201, datetime.now())
# prueba.add_record(params)

#To close ZAP:
zap.core.shutdown()
